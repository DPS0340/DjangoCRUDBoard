version: '3'

networks:
  app-tier:
    driver: bridge
  db-tier:
    driver: bridge
  prometheus-tier:
    driver: bridge
  elk-tier:
    driver: bridge

services:
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.docker/config.json:/config.json
    command: --interval 30
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./data/prometheus:/prometheus
    networks:
      - app-tier
      - db-tier
      - prometheus-tier
    expose:
      - "9090"
    ports:
      - "9090:9090"
  grafana:
    container_name: grafana
    image: grafana/grafana
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    links:
      - prometheus:prometheus
    networks:
      - prometheus-tier
    ports:
      - 3000:3000
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./data/grafana/grafana:/var/lib/grafana
      - ./data/grafana/provisioning:/etc/grafana/provisioning
  database:
    image: "postgres"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      - PGDATA=/var/lib/postgresql/data/django/
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=djangocrudboard
    networks:
      - db-tier
    expose:
      - "5432"
    volumes:
      - ./data/db:/var/lib/postgresql/data/django/

  gunicorn-backend:
    container_name: gunicorn-backend
    # image: a891/djangocrudboard:latest
    build:
      context: .
      args:
        Django_secret_key: "${Django_secret_key}"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - .:/code
    networks:
      - app-tier
      - db-tier
    expose:
      - "8000"
    depends_on:
      - database
      
  nginx-backend:
    container_name: nginx-backend
    image: nginx:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
    - ./nginx/nginx-app.conf:/etc/nginx/conf.d/default.conf
    - ./nginx/logs:/var/DjangoCRUDBoard-logs
    - ./data/certbot/conf:/etc/letsencrypt
    - ./data/certbot/www:/var/www/certbot 
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    expose:
    - "80"
    - "443"
    ports:
    - "80:80"
    - "443:443"
    networks:
    - app-tier
    depends_on:
    - gunicorn-backend
    environment:
    - NGINX_HOST=0.0.0.0
    - NGINX_PORT=80
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  cadvisor:
      image: google/cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      ports:
        - 8080:8080
      networks:
        - app-tier
      restart: always
      deploy:
        mode: global
        restart_policy:
          condition: on-failure

  node-exporter:
      image: prom/node-exporter
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - --collector.filesystem.ignored-mount-points
        - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
      ports:
        - 9100:9100
      restart: always
      networks:
        - app-tier
      deploy:
        mode: global
  # elk:
  #   image: sebp/elk
  #   ports:
  #     - "5601:5601"
  #     - "9200:9200"
  #     - "5044:5044"
  #   networks:
  #     - elk-tier
  #   volumes:
  #     - ./data/elk-data:/var/lib/elasticsearch
  #     - ./logstash-input.local.conf:/etc/logstash/conf.d/03-input.conf
  #   environment:
  #     ELASTIC_PASSWORD: elk

  # filebeat:
  #   build: ./filebeat
  #   networks:
  #     - elk-tier
  #   volumes:
  #     - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #     - ./nginx/logs:/var/log/nginx
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     # - /var/run/docker.sock:/var/run/docker.sock:ro
  #   depends_on:
  #     - nginx-backend
  #     - gunicorn-backend
  #     - elk
  #   links: 
  #     - elk
